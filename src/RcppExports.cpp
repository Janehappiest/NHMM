// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Crtnorm
Rcpp::NumericVector Crtnorm(int a, Rcpp::NumericVector muf, Rcpp::NumericVector sigf, Rcpp::NumericVector lowf, Rcpp::NumericVector upf, Rcpp::NumericVector boolowf, Rcpp::NumericVector booupf);
RcppExport SEXP NHMM_Crtnorm(SEXP aSEXP, SEXP mufSEXP, SEXP sigfSEXP, SEXP lowfSEXP, SEXP upfSEXP, SEXP boolowfSEXP, SEXP booupfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type a(aSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type muf(mufSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigf(sigfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lowf(lowfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type upf(upfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type boolowf(boolowfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type booupf(booupfSEXP );
        Rcpp::NumericVector __result = Crtnorm(a, muf, sigf, lowf, upf, boolowf, booupf);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_3d
int rcpp_3d(int jf, int kf, int lf, int Jf, int Kf, int Lf);
RcppExport SEXP NHMM_rcpp_3d(SEXP jfSEXP, SEXP kfSEXP, SEXP lfSEXP, SEXP JfSEXP, SEXP KfSEXP, SEXP LfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type jf(jfSEXP );
        Rcpp::traits::input_parameter< int >::type kf(kfSEXP );
        Rcpp::traits::input_parameter< int >::type lf(lfSEXP );
        Rcpp::traits::input_parameter< int >::type Jf(JfSEXP );
        Rcpp::traits::input_parameter< int >::type Kf(KfSEXP );
        Rcpp::traits::input_parameter< int >::type Lf(LfSEXP );
        int __result = rcpp_3d(jf, kf, lf, Jf, Kf, Lf);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_arraytomat
Rcpp::NumericMatrix rcpp_arraytomat(Rcpp::NumericVector arr3d, int c, int A, int B, int C);
RcppExport SEXP NHMM_rcpp_arraytomat(SEXP arr3dSEXP, SEXP cSEXP, SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type arr3d(arr3dSEXP );
        Rcpp::traits::input_parameter< int >::type c(cSEXP );
        Rcpp::traits::input_parameter< int >::type A(ASEXP );
        Rcpp::traits::input_parameter< int >::type B(BSEXP );
        Rcpp::traits::input_parameter< int >::type C(CSEXP );
        Rcpp::NumericMatrix __result = rcpp_arraytomat(arr3d, c, A, B, C);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dgamma
double rcpp_dgamma(double a, double b, double c);
RcppExport SEXP NHMM_rcpp_dgamma(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        double __result = rcpp_dgamma(a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dmvnorm
double rcpp_dmvnorm(Rcpp::NumericVector dataf, Rcpp::NumericVector meanf, Rcpp::NumericMatrix Siginvf, double detf);
RcppExport SEXP NHMM_rcpp_dmvnorm(SEXP datafSEXP, SEXP meanfSEXP, SEXP SiginvfSEXP, SEXP detfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dataf(datafSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type meanf(meanfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Siginvf(SiginvfSEXP );
        Rcpp::traits::input_parameter< double >::type detf(detfSEXP );
        double __result = rcpp_dmvnorm(dataf, meanf, Siginvf, detf);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dnorm
double rcpp_dnorm(double a, double b, double c);
RcppExport SEXP NHMM_rcpp_dnorm(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        double __result = rcpp_dnorm(a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dot
double rcpp_dot(Rcpp::NumericVector c, Rcpp::NumericVector d);
RcppExport SEXP NHMM_rcpp_dot(SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c(cSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type d(dSEXP );
        double __result = rcpp_dot(c, d);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dpois
double rcpp_dpois(double a, double b);
RcppExport SEXP NHMM_rcpp_dpois(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = rcpp_dpois(a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getdenzity
Rcpp::NumericVector rcpp_getdenzity(int A, Rcpp::NumericVector Wbin, Rcpp::NumericMatrix psi, Rcpp::NumericMatrix gamy, int fam, int K, int mixes, int delt, Rcpp::NumericMatrix y, Rcpp::NumericVector ppp, Rcpp::NumericVector theta1, Rcpp::NumericVector theta2);
RcppExport SEXP NHMM_rcpp_getdenzity(SEXP ASEXP, SEXP WbinSEXP, SEXP psiSEXP, SEXP gamySEXP, SEXP famSEXP, SEXP KSEXP, SEXP mixesSEXP, SEXP deltSEXP, SEXP ySEXP, SEXP pppSEXP, SEXP theta1SEXP, SEXP theta2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type A(ASEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Wbin(WbinSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type psi(psiSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type gamy(gamySEXP );
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< int >::type mixes(mixesSEXP );
        Rcpp::traits::input_parameter< int >::type delt(deltSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta1(theta1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta2(theta2SEXP );
        Rcpp::NumericVector __result = rcpp_getdenzity(A, Wbin, psi, gamy, fam, K, mixes, delt, y, ppp, theta1, theta2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getdenzityMVN
Rcpp::NumericMatrix rcpp_getdenzityMVN(int A, Rcpp::NumericVector Wbin, Rcpp::NumericMatrix psi, int K, Rcpp::NumericMatrix y, Rcpp::NumericVector thetainv, Rcpp::NumericVector detS);
RcppExport SEXP NHMM_rcpp_getdenzityMVN(SEXP ASEXP, SEXP WbinSEXP, SEXP psiSEXP, SEXP KSEXP, SEXP ySEXP, SEXP thetainvSEXP, SEXP detSSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type A(ASEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Wbin(WbinSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type psi(psiSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thetainv(thetainvSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type detS(detSSEXP );
        Rcpp::NumericMatrix __result = rcpp_getdenzityMVN(A, Wbin, psi, K, y, thetainv, detS);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getNQQ
Rcpp::NumericVector rcpp_getNQQ(Rcpp::NumericMatrix zbin, Rcpp::NumericMatrix beta, Rcpp::NumericMatrix XX);
RcppExport SEXP NHMM_rcpp_getNQQ(SEXP zbinSEXP, SEXP betaSEXP, SEXP XXSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zbin(zbinSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type XX(XXSEXP );
        Rcpp::NumericVector __result = rcpp_getNQQ(zbin, beta, XX);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getppp
Rcpp::NumericVector rcpp_getppp(Rcpp::NumericMatrix gamy, Rcpp::NumericMatrix mus);
RcppExport SEXP NHMM_rcpp_getppp(SEXP gamySEXP, SEXP musSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type gamy(gamySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mus(musSEXP );
        Rcpp::NumericVector __result = rcpp_getppp(gamy, mus);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getQQ
Rcpp::NumericVector rcpp_getQQ(int K, Rcpp::NumericVector z, Rcpp::NumericMatrix dirprior, Rcpp::NumericVector subseqy);
RcppExport SEXP NHMM_rcpp_getQQ(SEXP KSEXP, SEXP zSEXP, SEXP dirpriorSEXP, SEXP subseqySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dirprior(dirpriorSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type subseqy(subseqySEXP );
        Rcpp::NumericVector __result = rcpp_getQQ(K, z, dirprior, subseqy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getsumz1
Rcpp::NumericMatrix rcpp_getsumz1(int Kf, int Jf, int Tf, Rcpp::NumericVector zf, Rcpp::NumericVector Sigmainvf, Rcpp::NumericMatrix in2f);
RcppExport SEXP NHMM_rcpp_getsumz1(SEXP KfSEXP, SEXP JfSEXP, SEXP TfSEXP, SEXP zfSEXP, SEXP SigmainvfSEXP, SEXP in2fSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type Kf(KfSEXP );
        Rcpp::traits::input_parameter< int >::type Jf(JfSEXP );
        Rcpp::traits::input_parameter< int >::type Tf(TfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type zf(zfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Sigmainvf(SigmainvfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type in2f(in2fSEXP );
        Rcpp::NumericMatrix __result = rcpp_getsumz1(Kf, Jf, Tf, zf, Sigmainvf, in2f);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getsumz2
Rcpp::NumericVector rcpp_getsumz2(int llf, int LLf, int Kf, int Jf, int Tf, Rcpp::NumericVector zf, Rcpp::NumericVector Sigmainvf, Rcpp::NumericVector in2f, Rcpp::NumericMatrix yf, Rcpp::NumericMatrix betaemf, Rcpp::NumericMatrix betaem0f);
RcppExport SEXP NHMM_rcpp_getsumz2(SEXP llfSEXP, SEXP LLfSEXP, SEXP KfSEXP, SEXP JfSEXP, SEXP TfSEXP, SEXP zfSEXP, SEXP SigmainvfSEXP, SEXP in2fSEXP, SEXP yfSEXP, SEXP betaemfSEXP, SEXP betaem0fSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type llf(llfSEXP );
        Rcpp::traits::input_parameter< int >::type LLf(LLfSEXP );
        Rcpp::traits::input_parameter< int >::type Kf(KfSEXP );
        Rcpp::traits::input_parameter< int >::type Jf(JfSEXP );
        Rcpp::traits::input_parameter< int >::type Tf(TfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type zf(zfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Sigmainvf(SigmainvfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type in2f(in2fSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type yf(yfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type betaemf(betaemfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type betaem0f(betaem0fSEXP );
        Rcpp::NumericVector __result = rcpp_getsumz2(llf, LLf, Kf, Jf, Tf, zf, Sigmainvf, in2f, yf, betaemf, betaem0f);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getvvv
Rcpp::NumericMatrix rcpp_getvvv(int fam, int K, int mixes, int delt, Rcpp::NumericMatrix y, Rcpp::NumericVector ppp, Rcpp::NumericVector theta1, Rcpp::NumericVector theta2, Rcpp::NumericVector z);
RcppExport SEXP NHMM_rcpp_getvvv(SEXP famSEXP, SEXP KSEXP, SEXP mixesSEXP, SEXP deltSEXP, SEXP ySEXP, SEXP pppSEXP, SEXP theta1SEXP, SEXP theta2SEXP, SEXP zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< int >::type mixes(mixesSEXP );
        Rcpp::traits::input_parameter< int >::type delt(deltSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta1(theta1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta2(theta2SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP );
        Rcpp::NumericMatrix __result = rcpp_getvvv(fam, K, mixes, delt, y, ppp, theta1, theta2, z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getWbin
Rcpp::NumericVector rcpp_getWbin(Rcpp::NumericVector z, int K, int J);
RcppExport SEXP NHMM_rcpp_getWbin(SEXP zSEXP, SEXP KSEXP, SEXP JSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::NumericVector __result = rcpp_getWbin(z, K, J);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getymiss
Rcpp::NumericMatrix rcpp_getymiss(int fam, int K, Rcpp::NumericVector z, Rcpp::NumericVector ppp, Rcpp::NumericVector theta1, Rcpp::NumericVector theta2, int mixes, int delt, int J);
RcppExport SEXP NHMM_rcpp_getymiss(SEXP famSEXP, SEXP KSEXP, SEXP zSEXP, SEXP pppSEXP, SEXP theta1SEXP, SEXP theta2SEXP, SEXP mixesSEXP, SEXP deltSEXP, SEXP JSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< int >::type K(KSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type z(zSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta1(theta1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta2(theta2SEXP );
        Rcpp::traits::input_parameter< int >::type mixes(mixesSEXP );
        Rcpp::traits::input_parameter< int >::type delt(deltSEXP );
        Rcpp::traits::input_parameter< int >::type J(JSEXP );
        Rcpp::NumericMatrix __result = rcpp_getymiss(fam, K, z, ppp, theta1, theta2, mixes, delt, J);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_getz
void rcpp_getz(Rcpp::NumericVector zf, Rcpp::NumericVector QQf, Rcpp::NumericMatrix denzity, Rcpp::NumericVector subseqy);
RcppExport SEXP NHMM_rcpp_getz(SEXP zfSEXP, SEXP QQfSEXP, SEXP denzitySEXP, SEXP subseqySEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type zf(zfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type QQf(QQfSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type denzity(denzitySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type subseqy(subseqySEXP );
        rcpp_getz(zf, QQf, denzity, subseqy);
    }
    return R_NilValue;
END_RCPP
}
// rcpp_pnorm
double rcpp_pnorm(double a);
RcppExport SEXP NHMM_rcpp_pnorm(SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        double __result = rcpp_pnorm(a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_prod
double rcpp_prod(Rcpp::NumericVector A);
RcppExport SEXP NHMM_rcpp_prod(SEXP ASEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP );
        double __result = rcpp_prod(A);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rdirichlet
Rcpp::NumericVector rcpp_rdirichlet(Rcpp::NumericVector B);
RcppExport SEXP NHMM_rcpp_rdirichlet(SEXP BSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP );
        Rcpp::NumericVector __result = rcpp_rdirichlet(B);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dmix0
Rcpp::NumericVector rcpp_dmix0(int fam, double y, Rcpp::NumericVector ppp, Rcpp::NumericVector par1, Rcpp::NumericVector par2);
RcppExport SEXP NHMM_rcpp_dmix0(SEXP famSEXP, SEXP ySEXP, SEXP pppSEXP, SEXP par1SEXP, SEXP par2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< double >::type y(ySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par1(par1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par2(par2SEXP );
        Rcpp::NumericVector __result = rcpp_dmix0(fam, y, ppp, par1, par2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rmix0
double rcpp_rmix0(int fam, Rcpp::NumericVector ppp, Rcpp::NumericVector par1, Rcpp::NumericVector par2);
RcppExport SEXP NHMM_rcpp_rmix0(SEXP famSEXP, SEXP pppSEXP, SEXP par1SEXP, SEXP par2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par1(par1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par2(par2SEXP );
        double __result = rcpp_rmix0(fam, ppp, par1, par2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_dmix
Rcpp::NumericVector rcpp_dmix(int fam, double y, Rcpp::NumericVector ppp, Rcpp::NumericVector par1, Rcpp::NumericVector par2);
RcppExport SEXP NHMM_rcpp_dmix(SEXP famSEXP, SEXP ySEXP, SEXP pppSEXP, SEXP par1SEXP, SEXP par2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< double >::type y(ySEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par1(par1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par2(par2SEXP );
        Rcpp::NumericVector __result = rcpp_dmix(fam, y, ppp, par1, par2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rmix
double rcpp_rmix(int fam, Rcpp::NumericVector ppp, Rcpp::NumericVector par1, Rcpp::NumericVector par2);
RcppExport SEXP NHMM_rcpp_rmix(SEXP famSEXP, SEXP pppSEXP, SEXP par1SEXP, SEXP par2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type fam(famSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ppp(pppSEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par1(par1SEXP );
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type par2(par2SEXP );
        double __result = rcpp_rmix(fam, ppp, par1, par2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rgamma
double rcpp_rgamma(int a, double b, double c);
RcppExport SEXP NHMM_rcpp_rgamma(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        double __result = rcpp_rgamma(a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rmultinom
int rcpp_rmultinom(Rcpp::NumericVector probs);
RcppExport SEXP NHMM_rcpp_rmultinom(SEXP probsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP );
        int __result = rcpp_rmultinom(probs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rnorm
double rcpp_rnorm(int a, double b, double c);
RcppExport SEXP NHMM_rcpp_rnorm(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        double __result = rcpp_rnorm(a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_rpois
double rcpp_rpois(int a, double b);
RcppExport SEXP NHMM_rcpp_rpois(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = rcpp_rpois(a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_summ
double rcpp_summ(Rcpp::NumericMatrix A);
RcppExport SEXP NHMM_rcpp_summ(SEXP ASEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP );
        double __result = rcpp_summ(A);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_sumv
double rcpp_sumv(Rcpp::NumericVector A);
RcppExport SEXP NHMM_rcpp_sumv(SEXP ASEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type A(ASEXP );
        double __result = rcpp_sumv(A);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
